import psycopg2
from typing import Dict, Optional
from dotenv import load_dotenv
import os

# Load environment variables for DB connection
load_dotenv()
DB_PARAMS = {
    'dbname': os.getenv('DB_NAME', 'database_trial'),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', 'postgres'),
    'host': os.getenv('DB_HOST', 'postgres'),
    'port': os.getenv('DB_PORT', '5432')
}


PARENT_ACCOUNT_MAP: Dict[str, Optional[str]] = {
    'TOTAL_ASSETS': None,

    'TOTAL_CURRENT_ASSETS': 'TOTAL_ASSETS',
    
    'CASH_AND_CASH_EQUIVALENTS' : 'TOTAL_CURRENT_ASSETS',
    'CASH_ACCOUNTS_REAL_ESTATE_PROJECTS' : 'TOTAL_CURRENT_ASSETS',
    'FINANCIAL_INVESTMENTS_CURRENT' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_PLEDGED_FINANCIAL_ASSETS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_TRADE_RECEIVABLES' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_FINANCIAL_SECTOR_RECEIVABLES' : 'TOTAL_CURRENT_ASSETS',
    'CENTRAL_BANK_OF_TURKEY_ACCOUNT' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_OTHER_RECEIVABLES' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_ASSETS_FROM_CUSTOMER_CONTRACTS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_FINANCIAL_ASSETS_FROM_CONCESSION_CONTRACTS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_DERIVATIVE_INSTRUMENTS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_INVENTORIES' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_INVENTORIES_IN_PROGRESS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_BIOLOGICAL_ASSETS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_PREPAID_EXPENSES' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_DEFERRED_INSURANCE_PRODUCTION_COSTS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_TAX_ASSETS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_NON_CASH_FREELY_USABLE_COLLATERALS' : 'TOTAL_CURRENT_ASSETS',
    'OTHER_CURRENT_ASSETS' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_ASSETS_HELD_FOR_SALE' : 'TOTAL_CURRENT_ASSETS',
    'CURRENT_ASSETS_HELD_FOR_DISTRIBUTION_TO_OWNERS' : 'TOTAL_CURRENT_ASSETS',


    'TOTAL_FIXED_ASSETS': 'TOTAL_ASSETS',

    'FINANCIAL_INVESTMENTS_FIXED' : 'TOTAL_FIXED_ASSETS',
    'FIXED_INVESTMENTS_IN_ASSOCIATES_JOINT_VENTURES_AND_SUBSIDIARIES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_TRADE_RECEIVABLES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_FINANCIAL_SECTOR_RECEIVABLES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_OTHER_RECEIVABLES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_ASSETS_FROM_CUSTOMER_CONTRACTS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_FINANCIAL_ASSETS_FROM_CONCESSION_CONTRACTS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_DERIVATIVE_INSTRUMENTS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_INVENTORIES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_EQUITY_METHOD_INVESTMENTS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_BIOLOGICAL_ASSETS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_INVESTMENT_PROPERTIES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_INVESTMENT_PROPERTIES_IN_PROGRESS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_TANGIBLE_ASSETS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_RIGHT_OF_USE_ASSETS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_INTANGIBLE_ASSETS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_PREPAID_EXPENSES' : 'TOTAL_FIXED_ASSETS',
    'FIXED_DEFERRED_TAX_ASSETS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_CURRENT_PERIOD_TAX_ASSETS' : 'TOTAL_FIXED_ASSETS',
    'FIXED_NON_CASH_FREELY_USABLE_COLLATERALS' : 'TOTAL_FIXED_ASSETS',
    'OTHER_FIXED_ASSETS' : 'TOTAL_FIXED_ASSETS',
    
    'TOTAL_RESOURCES': None,

    'TOTAL_LIABILITIES': 'TOTAL_RESOURCES',

    'TOTAL_SHORT_TERM_LIABILITIES': 'TOTAL_LIABILITIES',

    'SHORT_TERM_FINANCIAL_BORROWINGS' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_OTHER_FINANCIAL_LIABILITIES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_TRADE_PAYABLES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_FINANCIAL_SECTOR_LIABILITIES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_EMPLOYEE_BENEFITS_LIABILITIES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_OTHER_BORROWINGS' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_LIABILITIES_FROM_CUSTOMER_CONTRACTS' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_LIABILITIES_FROM_EQUITY_METHOD_INVESTMENTS' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_DERIVATIVE_LIABILITIES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_GOVERNMENT_GRANTS_AND_AIDS' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_DEFERRED_INCOME' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_INCOME_TAX_LIABILITIES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_PROVISIONS' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'OTHER_SHORT_TERM_LIABILITIES' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_LIABILITIES_RELATING_TO_ASSETS_CLASSIFIED_AS_HELD_FOR_SALE' : 'TOTAL_SHORT_TERM_LIABILITIES',
    'SHORT_TERM_LIABILITIES_RELATING_TO_ASSETS_HELD_FOR_DISTRIBUTION_TO_OWNERS' : 'TOTAL_SHORT_TERM_LIABILITIES',

    'TOTAL_LONG_TERM_LIABILITIES': 'TOTAL_LIABILITIES',

    'LONG_TERM_FINANCIAL_BORROWINGS' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_OTHER_FINANCIAL_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_TRADE_PAYABLES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_FINANCIAL_SECTOR_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_EMPLOYEE_BENEFITS_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_OTHER_BORROWINGS' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_LIABILITIES_FROM_CUSTOMER_CONTRACTS' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_GOVERNMENT_GRANTS_AND_AIDS' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_LIABILITIES_FROM_EQUITY_METHOD_INVESTMENTS' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_DERIVATIVE_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_DEFERRED_INCOME' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_PROVISIONS' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_CURRENT_PERIOD_TAX_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'LONG_TERM_DEFERRED_TAX_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    'OTHER_LONG_TERM_LIABILITIES' : 'TOTAL_LONG_TERM_LIABILITIES',
    
    'TOTAL_EQUITY': 'TOTAL_RESOURCES',

    'EQUITY_ATTRIBUTABLE_TO_OWNERS_OF_PARENT' : 'TOTAL_EQUITY',
    'PAID_IN_CAPITAL' : 'TOTAL_EQUITY',
    'CAPITAL_ADJUSTMENT_DIFFERENCES' : 'TOTAL_EQUITY',
    'MERGER_EQUALISATION_ACCOUNT' : 'TOTAL_EQUITY',
    'ADDITIONAL_PAID_IN_CAPITAL' : 'TOTAL_EQUITY',
    'CAPITAL_ADVANCE' : 'TOTAL_EQUITY',
    'TREASURY_SHARES' : 'TOTAL_EQUITY',
    'RECIPROCAL_INVESTMENT_CAPITAL_ADJUSTMENT' : 'TOTAL_EQUITY',
    'SHARE_PREMIUMS' : 'TOTAL_EQUITY',
    'EFFECT_OF_BUSINESS_COMBINATIONS_UNDER_COMMON_CONTROL' : 'TOTAL_EQUITY',
    'SHARE_BASED_PAYMENTS' : 'TOTAL_EQUITY',
    'ACCUMULATED_OTHER_COMPREHENSIVE_INCOME_NOT_RECLASSIFIED' : 'TOTAL_EQUITY',
    'ACCUMULATED_OTHER_COMPREHENSIVE_INCOME_RECLASSIFIED' : 'TOTAL_EQUITY',
    'RESTRICTED_RESERVES_APPROPRIATED_FROM_PROFIT' : 'TOTAL_EQUITY',
    'OTHER_EQUITY_INTERESTS' : 'TOTAL_EQUITY',
    'OTHER_RESERVES' : 'TOTAL_EQUITY',
    'DIVIDEND_ADVANCES_PAID_NET' : 'TOTAL_EQUITY',
    'RETAINED_EARNINGS' : 'TOTAL_EQUITY',
    'PROFIT_OR_LOSS_FOR_THE_PERIOD' : 'TOTAL_EQUITY',
    'NON_CONTROLLING_INTERESTS' : 'TOTAL_EQUITY',

    'NET_FOREIGN_CURRENCY_POSITION_INCLUDING_HEDGE' : None,
}



def update_parent_accounts() -> None:
    """
    Update the parent_account_id for each account.code based on parent_map.
    parent_map maps account.code -> parent account.code (or None).
    """
    parent_map = PARENT_ACCOUNT_MAP
    conn = psycopg2.connect(**DB_PARAMS)
    try:
        with conn:
            with conn.cursor() as cur:
                # 1. Fetch account_id for every code we care about
                codes = list(parent_map.keys()) + [c for c in parent_map.values() if c]
                cur.execute(
                    "SELECT code, account_id FROM account WHERE code = ANY(%s)",
                    (list(set(codes)),)
                )
                code_to_id = {code: aid for code, aid in cur.fetchall()}

                # 2. Build list of (parent_id, code) tuples
                updates = []
                for code, parent_code in parent_map.items():
                    parent_id = code_to_id.get(parent_code) if parent_code else None
                    updates.append((parent_id, code))

                # 3. Apply all updates in a single executemany
                cur.executemany(
                    "UPDATE account SET parent_account_id = %s WHERE code = %s",
                    updates
                )

        print(f"Updated parent_account_id for {len(updates)} accounts.")
    finally:
        conn.close()
